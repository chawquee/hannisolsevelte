-- database/hannisol.db
-- SQLite Database Schema for Hannisol Solana Address Checker
-- This file contains the complete database structure

PRAGMA foreign_keys = ON;
PRAGMA journal_mode = WAL;
PRAGMA synchronous = NORMAL;
PRAGMA cache_size = 1000000;
PRAGMA temp_store = MEMORY;

-- Table: searches
-- Stores all address search requests and results
CREATE TABLE IF NOT EXISTS searches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ip_address TEXT NOT NULL,
    address_searched TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    country TEXT,
    region TEXT,
    city TEXT,
    user_agent TEXT,
    referrer TEXT,
    search_count INTEGER DEFAULT 1,
    result_data TEXT, -- JSON string of analysis results
    risk_score REAL DEFAULT 0,
    is_flagged BOOLEAN DEFAULT FALSE,
    is_blocked BOOLEAN DEFAULT FALSE,
    flagged_at DATETIME,
    blocked_at DATETIME,
    admin_notes TEXT,
    session_id TEXT,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: revenue
-- Tracks all revenue from ads and affiliate programs
CREATE TABLE IF NOT EXISTS revenue (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    source TEXT NOT NULL, -- 'adsense', 'media-net', 'coinzilla', 'a-ads', 'amazon', 'ledger', etc.
    amount_usd REAL NOT NULL,
    original_amount REAL NOT NULL,
    original_currency TEXT DEFAULT 'USD',
    type TEXT NOT NULL CHECK (type IN ('ad_revenue', 'affiliate_commission', 'other')),
    description TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    metadata TEXT, -- JSON string for additional data
    added_by_ip TEXT,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: shared_results
-- Stores shared analysis results
CREATE TABLE IF NOT EXISTS shared_results (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    share_id TEXT UNIQUE NOT NULL,
    address TEXT NOT NULL,
    title TEXT,
    description TEXT,
    validation_results TEXT NOT NULL, -- JSON
    risk_analysis TEXT NOT NULL, -- JSON
    transaction_data TEXT, -- JSON
    view_count INTEGER DEFAULT 0,
    is_public BOOLEAN DEFAULT TRUE,
    allow_comments BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    password_hash TEXT,
    password_protected BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    expires_at DATETIME,
    last_viewed_at DATETIME,
    creator_ip TEXT,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: share_views
-- Tracks views of shared results
CREATE TABLE IF NOT EXISTS share_views (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    share_id TEXT NOT NULL,
    ip_address TEXT NOT NULL,
    user_agent TEXT,
    referrer TEXT,
    viewed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (share_id) REFERENCES shared_results (share_id) ON DELETE CASCADE
);

-- Table: ip_blocklist
-- Manages blocked IP addresses
CREATE TABLE IF NOT EXISTS ip_blocklist (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ip_address TEXT UNIQUE NOT NULL,
    reason TEXT,
    blocked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    blocked_by TEXT, -- Admin IP who blocked
    is_active BOOLEAN DEFAULT TRUE,
    expires_at DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: admin_users
-- Admin user management
CREATE TABLE IF NOT EXISTS admin_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    role TEXT DEFAULT 'admin',
    is_active BOOLEAN DEFAULT TRUE,
    last_login DATETIME,
    login_count INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: admin_actions
-- Logs all admin actions for audit trail
CREATE TABLE IF NOT EXISTS admin_actions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    action TEXT NOT NULL,
    target_type TEXT, -- 'search', 'revenue', 'user', etc.
    target_id TEXT,
    metadata TEXT, -- JSON string
    admin_ip TEXT,
    admin_email TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: auth_logs
-- Authentication attempt logs
CREATE TABLE IF NOT EXISTS auth_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ip_address TEXT NOT NULL,
    email TEXT,
    action TEXT NOT NULL, -- 'login', 'logout', 'verify'
    success BOOLEAN NOT NULL,
    user_agent TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: request_logs
-- HTTP request logging for analytics and security
CREATE TABLE IF NOT EXISTS request_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ip_address TEXT NOT NULL,
    method TEXT NOT NULL,
    url TEXT NOT NULL,
    status_code INTEGER,
    response_time INTEGER, -- milliseconds
    user_agent TEXT,
    referrer TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: error_logs
-- Application error logging
CREATE TABLE IF NOT EXISTS error_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    error_id TEXT UNIQUE NOT NULL,
    ip_address TEXT,
    url TEXT,
    method TEXT,
    error_message TEXT,
    stack_trace TEXT,
    user_agent TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: page_views
-- Page view analytics
CREATE TABLE IF NOT EXISTS page_views (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ip_address TEXT NOT NULL,
    path TEXT NOT NULL,
    user_agent TEXT,
    referrer TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: ad_networks
-- Configuration for ad networks
CREATE TABLE IF NOT EXISTS ad_networks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    network TEXT UNIQUE NOT NULL, -- 'adsense', 'media-net', etc.
    is_active BOOLEAN DEFAULT TRUE,
    priority INTEGER DEFAULT 1,
    config_data TEXT, -- JSON configuration
    placement_config TEXT, -- JSON for ad placements
    revenue_share REAL DEFAULT 1.0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: site_settings
-- Global site configuration
CREATE TABLE IF NOT EXISTS site_settings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    key TEXT UNIQUE NOT NULL,
    value TEXT,
    type TEXT DEFAULT 'string', -- 'string', 'number', 'boolean', 'json'
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: announcements
-- Site-wide announcements
CREATE TABLE IF NOT EXISTS announcements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    message TEXT NOT NULL,
    type TEXT DEFAULT 'info', -- 'info', 'warning', 'success', 'error'
    is_active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    expires_at DATETIME,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table: revenue_goals
-- Monthly revenue targets and tracking
CREATE TABLE IF NOT EXISTS revenue_goals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    month TEXT UNIQUE NOT NULL, -- YYYY-MM format
    target_amount REAL NOT NULL,
    actual_amount REAL DEFAULT 0,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for performance optimization
CREATE INDEX IF NOT EXISTS idx_searches_ip_timestamp ON searches (ip_address, timestamp);
CREATE INDEX IF NOT EXISTS idx_searches_address ON searches (address_searched);
CREATE INDEX IF NOT EXISTS idx_searches_timestamp ON searches (timestamp);
CREATE INDEX IF NOT EXISTS idx_searches_country ON searches (country);
CREATE INDEX IF NOT EXISTS idx_searches_flagged ON searches (is_flagged, is_blocked);

CREATE INDEX IF NOT EXISTS idx_revenue_source_timestamp ON revenue (source, timestamp);
CREATE INDEX IF NOT EXISTS idx_revenue_timestamp ON revenue (timestamp);
CREATE INDEX IF NOT EXISTS idx_revenue_type ON revenue (type);

CREATE INDEX IF NOT EXISTS idx_shared_results_share_id ON shared_results (share_id);
CREATE INDEX IF NOT EXISTS idx_shared_results_active ON shared_results (is_active, expires_at);
CREATE INDEX IF NOT EXISTS idx_shared_results_created ON shared_results (created_at);

CREATE INDEX IF NOT EXISTS idx_share_views_share_id ON share_views (share_id);
CREATE INDEX IF NOT EXISTS idx_share_views_ip ON share_views (ip_address);

CREATE INDEX IF NOT EXISTS idx_ip_blocklist_ip ON ip_blocklist (ip_address);
CREATE INDEX IF NOT EXISTS idx_ip_blocklist_active ON ip_blocklist (is_active);

CREATE INDEX IF NOT EXISTS idx_admin_actions_timestamp ON admin_actions (timestamp);
CREATE INDEX IF NOT EXISTS idx_admin_actions_action ON admin_actions (action);

CREATE INDEX IF NOT EXISTS idx_auth_logs_ip_timestamp ON auth_logs (ip_address, timestamp);
CREATE INDEX IF NOT EXISTS idx_auth_logs_email ON auth_logs (email);

CREATE INDEX IF NOT EXISTS idx_request_logs_ip_timestamp ON request_logs (ip_address, timestamp);
CREATE INDEX IF NOT EXISTS idx_request_logs_url ON request_logs (url);

CREATE INDEX IF NOT EXISTS idx_error_logs_timestamp ON error_logs (timestamp);
CREATE INDEX IF NOT EXISTS idx_error_logs_error_id ON error_logs (error_id);

CREATE INDEX IF NOT EXISTS idx_page_views_path_timestamp ON page_views (path, timestamp);
CREATE INDEX IF NOT EXISTS idx_page_views_ip ON page_views (ip_address);

-- Triggers for automatic timestamp updates
CREATE TRIGGER IF NOT EXISTS update_searches_timestamp 
    AFTER UPDATE ON searches
    BEGIN
        UPDATE searches SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER IF NOT EXISTS update_revenue_timestamp 
    AFTER UPDATE ON revenue
    BEGIN
        UPDATE revenue SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER IF NOT EXISTS update_shared_results_timestamp 
    AFTER UPDATE ON shared_results
    BEGIN
        UPDATE shared_results SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER IF NOT EXISTS update_admin_users_timestamp 
    AFTER UPDATE ON admin_users
    BEGIN
        UPDATE admin_users SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER IF NOT EXISTS update_site_settings_timestamp 
    AFTER UPDATE ON site_settings
    BEGIN
        UPDATE site_settings SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

-- Initial data setup
INSERT OR IGNORE INTO admin_users (email, password_hash, role) 
VALUES ('admin@hannisol.com', '$2a$12$example.replace.with.real.bcrypt.hash', 'admin');

INSERT OR IGNORE INTO ad_networks (network, is_active, priority) VALUES
    ('adsense', 1, 1),
    ('media-net', 1, 2),
    ('coinzilla', 1, 3),
    ('a-ads', 1, 4);

INSERT OR IGNORE INTO site_settings (key, value, type, description) VALUES
    ('maintenance_mode', 'false', 'boolean', 'Enable maintenance mode'),
    ('max_searches_per_hour', '100', 'number', 'Maximum searches per IP per hour'),
    ('enable_analytics', 'true', 'boolean', 'Enable Google Analytics'),
    ('enable_ads', 'true', 'boolean', 'Enable ad networks'),
    ('site_title', 'Hannisol - Solana Address Checker', 'string', 'Site title'),
    ('site_description', 'Professional Solana address validation and blockchain analysis', 'string', 'Site description'),
    ('contact_email', 'support@hannisol.com', 'string', 'Contact email address'),
    ('app_version', '1.0.0', 'string', 'Application version');

-- Views for common queries
CREATE VIEW IF NOT EXISTS search_analytics AS
SELECT 
    DATE(timestamp) as date,
    COUNT(*) as total_searches,
    COUNT(DISTINCT ip_address) as unique_visitors,
    COUNT(DISTINCT address_searched) as unique_addresses,
    AVG(risk_score) as avg_risk_score,
    COUNT(CASE WHEN is_flagged = 1 THEN 1 END) as flagged_searches
FROM searches 
GROUP BY DATE(timestamp)
ORDER BY date DESC;

CREATE VIEW IF NOT EXISTS revenue_summary AS
SELECT 
    source,
    type,
    COUNT(*) as transaction_count,
    SUM(amount_usd) as total_revenue,
    AVG(amount_usd) as avg_revenue,
    MIN(amount_usd) as min_revenue,
    MAX(amount_usd) as max_revenue,
    DATE(timestamp) as date
FROM revenue 
GROUP BY source, type, DATE(timestamp)
ORDER BY date DESC, total_revenue DESC;

CREATE VIEW IF NOT EXISTS popular_addresses AS
SELECT 
    address_searched,
    COUNT(*) as search_count,
    COUNT(DISTINCT ip_address) as unique_searchers,
    AVG(risk_score) as avg_risk_score,
    MAX(timestamp) as last_searched,
    MIN(timestamp) as first_searched
FROM searches 
WHERE address_searched IS NOT NULL
GROUP BY address_searched
ORDER BY search_count DESC;

-- Cleanup old data (run periodically)
-- DELETE FROM request_logs WHERE timestamp < datetime('now', '-30 days');
-- DELETE FROM auth_logs WHERE timestamp < datetime('now', '-90 days');
-- DELETE FROM error_logs WHERE timestamp < datetime('now', '-90 days');
-- DELETE FROM page_views WHERE timestamp < datetime('now', '-90 days');

PRAGMA optimize;